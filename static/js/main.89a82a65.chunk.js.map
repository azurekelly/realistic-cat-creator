{"version":3,"sources":["state/catState.js","state/rootReducer.js","state/store.js","theme.js","components/Button.js","components/Slider.js","components/Section.js","components/sections/FurColorSection.js","components/sections/MarkingTypeSection.js","components/sections/PatternSection.js","components/sections/SilverSection.js","components/sections/PointSection.js","components/sections/WhiteSection.js","components/sections/EyeColorSection.js","utils/randomizerUtils.js","components/ButtonControls.js","components/ColorPanel.js","utils/utils.js","images/lineart.png","images/base.png","images/eyes.png","images/mackerel.png","images/classic.png","images/spotted.png","images/ticked.png","images/rosette.png","images/marble.png","images/smoke.png","images/shaded.png","images/tipped.png","images/tortie.png","images/point.png","images/white-low.png","images/white-medium.png","images/white-high.png","rendering/BufferCanvas.js","utils/color-utils.js","rendering/catColors.js","rendering/CatCanvas.js","components/CatDisplay.js","components/CatDisplayContainer.js","components/CatDescription.js","App.js","index.js"],"names":["UPDATE_CAT","updateCat","traits","type","payload","catSelector","state","cat","catReducer","action","rootReducer","combineReducers","initialState","baseColor","dilute","fullWhite","redness","dilution","tabby","tortie","pattern","patternContrast","silver","whiteSpread","point","blueEyes","eyeColor","store","createStore","devToolsEnhancer","colors","black","white","lightGray","darkGray","primary","primaryHover","primaryInvertedHover","primaryPressed","primaryDisabled","Button","styled","input","attrs","props","activated","StyledContainer","div","StyledLabel","span","FlexContainer","StyledSlider","StyledInput","required","darkGay","Slider","label","aria-label","onChange","e","target","value","Math","max","min","ButtonGroup","FlexButton","SectionHeading","h2","GroupHeading","h3","Section","title","buttonGroups","sliders","disabled","map","group","i","undefined","shouldRender","buttons","button","onClick","slider","step","FurColorSection","dispatch","useDispatch","useSelector","buttonGroup","Number","MarkingTypeSection","PatternSection","SilverSection","PointSection","WhiteSection","EyeColorSection","hasNormalEyes","pickRandomInt","floor","random","pickRandomBool","pickRandomWeighted","options","result","randomInt","sumWeights","reduce","acc","curr","rng","currentSum","length","Container","section","ButtonControls","arr","generateRandomCat","ColorPanel","loadImage","src","Promise","resolve","reject","img","Image","addEventListener","err","mapTraitToRange","targetMin","targetMax","BufferCanvas","width","height","canvas","document","createElement","this","context","getContext","fill","mask","clearRect","globalCompositeOperation","fillStyle","fillRect","drawImage","Array","isArray","forEach","maskImg","rgbToHex","rgb","hexComponents","component","minMaxedComponent","hexComponent","round","toString","join","blendAlpha","bottomColor","topColor","alpha","x","CONSTANTS","blackIntensity","chocolateIntensity","cinnamonIntensity","redMinIntensity","redMaxIntensity","dilutionMin","dilutionMax","agoutiFactor","agoutiSilverFactor","redSilverFactor","agoutiContrastMin","agoutiContrastMax","silverContrastMin","silverContrastMax","widebandContrastMin","widebandContrastMax","pointLightFactor","pointBlackLightFactor","minkLightFactor","sepiaLightFactor","pointDarkFactor","pointRedFactor","simulateMelanin","melaninType","intensity","silvering","concentration","absorption","getEumelaninAbsorption","melaninRgb","exp","silverRgb","getBlackSettings","pointLight","baseIntensity","pointFactor","getRedSettings","getAgoutiSettings","blendAgouti","baseSettings","baseRgb","agoutiRgb","getRedGroundColor","getRedTopColor","getBlackGroundColor","getBlackTopColor","getEyeColor","eyeColors","copper","orange","yellow","hazel","green","aqua","blue","CatCanvas","onLoad","loaded","loadImages","imageSrcs","base","lineart","eyes","mackerel","classic","spotted","ticked","rosette","marble","smoke","shaded","tipped","whiteLow","whiteMedium","whiteHigh","all","imgSrc","then","images","buffer","layers","getLayerList","layer","image","color","CatDisplay","canvasRef","useRef","catCanvas","useState","setLoaded","useEffect","current","drawCat","ref","withSize","monitorHeight","size","children","aspectRatio","setAspectRatio","Infinity","maxWidth","setMaxWidth","calculatedWidth","calculatedHeight","style","getDescription","isRed","isBlack","isStriped","isGolden","chocolate","cinnamon","red","charAt","toUpperCase","slice","CatDescription","SidePane","MainPane","DisplayWrapper","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.89a82a65.chunk.js","sourcesContent":["// TYPES\r\nexport const UPDATE_CAT = 'UPDATE_CAT';\r\n\r\n// ACTIONS\r\n// trait can be a single trait or the entirety of the cat's phenotype, it just gets merged with the existing phenotype\r\nexport const updateCat = traits => ({\r\n    type: UPDATE_CAT,\r\n    payload: traits\r\n});\r\n\r\n// SELECTORS\r\nexport const catSelector = state => state.cat;\r\n\r\n// REDUCERS\r\nconst catReducer = (state = {}, action) => {\r\n    switch(action.type) {\r\n        case UPDATE_CAT:\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default catReducer;","import {combineReducers} from 'redux';\r\nimport cat from './catState';\r\n\r\n// using combineReducers to be able to add more reducers later\r\nconst rootReducer = combineReducers({cat});\r\n\r\nexport default rootReducer;","import {createStore} from 'redux';\r\nimport {devToolsEnhancer} from 'redux-devtools-extension';\r\nimport rootReducer from './rootReducer';\r\n\r\nexport const initialState = {\r\n    cat: {\r\n        baseColor: 'black',\r\n        dilute: false,\r\n        fullWhite: false,\r\n        redness: 8, // visible on red-based cats, torties, and non-red tabbies\r\n        dilution: 8, // only visible on dilutes\r\n        tabby: false,\r\n        tortie: false,\r\n        pattern: 'mackerel', // only visible on non-solids, can be many options\r\n        patternContrast: 8,\r\n        silver: false,\r\n        whiteSpread: 0,\r\n        point: 'standard',\r\n        blueEyes: false,\r\n        eyeColor: 'hazel'\r\n        // eyePigment: 8,\r\n        // blueRefraction: 8,\r\n        // eyeColorBase: 'standard' // can be standard, aqua, or blue\r\n    }\r\n};\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    devToolsEnhancer()\r\n);\r\n\r\nexport default store;","export const colors = {\r\n    black: '#231b2e',\r\n    white: '#fff', // included in case color scheme changes white to be tinted in the future\r\n    lightGray: '#eeeaf1',\r\n    darkGray: '#332f38',\r\n    primary: '#a952b3',\r\n    primaryHover: '#c15ecc',\r\n    primaryInvertedHover: '#f6edf7',\r\n    primaryPressed: '#914699',\r\n    primaryDisabled: '#eac5ec'\r\n};\r\n\r\nexport const font = \"'Montserrat', sans-serif\";","import styled from 'styled-components';\r\nimport {colors} from '../theme';\r\n\r\nconst Button = styled.input.attrs({type: 'button'})`\r\n    padding: 0.5rem 1rem;\r\n    margin-right: 0.5rem;\r\n    margin-bottom: 0.5rem;\r\n    font-family: 'Montserrat', sans-serif;\r\n    font-size: 1rem;\r\n    background-color: ${props => (props.activated ? colors.primary : colors.white)};\r\n    color: ${props => (props.activated ? colors.white : colors.primary)};\r\n    border-radius: 0.25em;\r\n    border: 2px solid ${colors.primary};\r\n    cursor: pointer;\r\n    flex-basis: 23%;\r\n\r\n    &:hover, &:focus {\r\n        background-color: ${props => (props.activated ? colors.primaryHover : colors.primaryInvertedHover)};\r\n        color: ${props => (props.activated ? colors.white : colors.primaryPressed)}; // darker text color to allow better readability with hover bg color\r\n        outline-color: ${colors.primary}; // override the default black outline\r\n    }\r\n    &:active {\r\n        background-color: ${props => (props.activated ? colors.primaryPressed : colors.primary)};\r\n        color: ${colors.white};\r\n    }\r\n    &:disabled {\r\n        background-color: ${props => (props.activated ? colors.primaryDisabled : colors.white)};\r\n        border-color: ${colors.primaryDisabled};\r\n        color: ${props => (props.activated ? colors.white : colors.primaryDisabled)};\r\n        cursor: default;\r\n    }\r\n`;\r\n\r\nexport default Button;","import styled from 'styled-components';\r\nimport {colors, font} from '../theme';\r\n\r\nconst StyledContainer = styled.div`\r\n    margin-bottom: 1em;\r\n`;\r\n\r\nconst StyledLabel = styled.span`\r\n    display: block;\r\n`;\r\n\r\nconst FlexContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n`;\r\n\r\nconst StyledSlider = styled.input.attrs({type: 'range'})`\r\n    margin-right: 1em;\r\n    flex-grow: 1;\r\n`;\r\n\r\nconst StyledInput = styled.input.attrs({type: 'number', required: true})`\r\n    min-width: 0;\r\n    width: 4rem;\r\n    padding: 0.5rem;\r\n    padding-left: 1rem;\r\n    border-radius: 0.25rem;\r\n    background: ${colors.lightGray};\r\n    border: none;\r\n    font-family: ${font};\r\n    color: ${colors.darkGay};\r\n\r\n    &:focus-visible {\r\n        outline-color: ${colors.primary};\r\n    }\r\n`;\r\n\r\nconst Slider = ({label, ...props}) => (\r\n    <StyledContainer>\r\n        <StyledLabel>{label}</StyledLabel>\r\n        <FlexContainer>\r\n            <StyledSlider aria-label={label} {...props} />\r\n            <StyledInput aria-label={label + ' number'} {...props} onChange={e => {\r\n                // constrict value to min and max\r\n                e.target.value = Math.max(Math.min(e.target.value, e.target.max), e.target.min);\r\n\r\n                if(props.onChange) {\r\n                    props.onChange(e);\r\n                }\r\n            }} />\r\n        </FlexContainer>\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Slider;","import styled from 'styled-components';\r\nimport Button from './Button';\r\nimport Slider from './Slider';\r\nimport {colors} from '../theme';\r\n\r\nconst ButtonGroup = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin-bottom: 1rem;\r\n`;\r\n\r\nconst FlexButton = styled(Button)`\r\n    flex-basis: 23%;\r\n    padding: 0.5rem 0; // Allows longer items like cinnamon to shrink\r\n    @media (max-width: 1400px) { // the point at which the longer buttons look bad\r\n        flex-basis: calc(50% - 0.5rem);\r\n    }\r\n    @media (max-width: 768px) {\r\n        flex-basis: 100%;\r\n    }\r\n`;\r\n\r\nconst SectionHeading = styled.h2`\r\n    text-transform: uppercase;\r\n    font-weight: normal;\r\n    border-bottom: 1px solid ${colors.darkGray};\r\n    margin: 2rem 0 1rem;\r\n    font-size: 1.5rem;\r\n`;\r\n\r\nconst GroupHeading = styled.h3`\r\n    margin: 1rem 0 0.5rem;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 1rem;\r\n`;\r\n\r\n// buttons and sliders should be passed as objects, not components\r\nconst Section = ({title, buttonGroups, sliders, disabled}) => (\r\n    <section>\r\n        <SectionHeading>{title}</SectionHeading>\r\n        {buttonGroups && (buttonGroups.map((group, i) => {\r\n            if((group.shouldRender === undefined) || group.shouldRender) {\r\n                return (\r\n                    <>\r\n                        {group.title && (<GroupHeading>{group.title}</GroupHeading>)}\r\n                        <ButtonGroup key={i}>\r\n                            {group.buttons.map(button => (\r\n                                <FlexButton\r\n                                    key={button.label}\r\n                                    value={button.label}\r\n                                    onClick={button.onClick}\r\n                                    disabled={button.disabled || disabled}\r\n                                    activated={button.activated}\r\n                                />\r\n                            ))}\r\n                        </ButtonGroup>\r\n                    </>\r\n                );\r\n            }\r\n            else {\r\n                return <></>;\r\n            }\r\n        }))}\r\n        {sliders && (sliders.map(slider => (\r\n            <Slider\r\n                key={slider.label}\r\n                label={slider.label}\r\n                min={0}\r\n                max={16}\r\n                value={slider.value}\r\n                step={1}\r\n                onChange={slider.onChange}\r\n                disabled={slider.disabled || disabled}\r\n            />\r\n        )))}\r\n    </section>\r\n);\r\n\r\nexport default Section;","import {useSelector, useDispatch} from 'react-redux';\r\nimport Section from '../Section';\r\nimport {catSelector, updateCat} from '../../state/catState';\r\n\r\nconst FurColorSection = () => {\r\n    const dispatch = useDispatch();\r\n    const cat = useSelector(catSelector);\r\n\r\n    const buttonGroup = [{\r\n        buttons: [\r\n            {\r\n                label: 'Black',\r\n                onClick: () => dispatch(updateCat({baseColor: 'black', dilute: false, fullWhite: false})),\r\n                activated: !cat.fullWhite && !cat.dilute && cat.baseColor == 'black'\r\n            },\r\n            {\r\n                label: 'Chocolate',\r\n                onClick: () => dispatch(updateCat({baseColor: 'chocolate', dilute: false, fullWhite: false})),\r\n                activated: !cat.fullWhite && !cat.dilute && cat.baseColor == 'chocolate'\r\n            },\r\n            {\r\n                label: 'Cinnamon',\r\n                onClick: () => dispatch(updateCat({baseColor: 'cinnamon', dilute: false, fullWhite: false})),\r\n                activated: !cat.fullWhite && !cat.dilute && cat.baseColor == 'cinnamon'\r\n            },\r\n            {\r\n                label: 'Red',\r\n                onClick: () => dispatch(updateCat({baseColor: 'red', dilute: false, fullWhite: false})),\r\n                activated: !cat.fullWhite && !cat.dilute && cat.baseColor == 'red'\r\n            },\r\n            {\r\n                label: 'Gray',\r\n                onClick: () => dispatch(updateCat({baseColor: 'black', dilute: true, fullWhite: false})),\r\n                activated: !cat.fullWhite && cat.dilute && cat.baseColor == 'black'\r\n            },\r\n            {\r\n                label: 'Lilac',\r\n                onClick: () => dispatch(updateCat({baseColor: 'chocolate', dilute: true, fullWhite: false})),\r\n                activated: !cat.fullWhite && cat.dilute && cat.baseColor == 'chocolate'\r\n            },\r\n            {\r\n                label: 'Fawn',\r\n                onClick: () => dispatch(updateCat({baseColor: 'cinnamon', dilute: true, fullWhite: false})),\r\n                activated: !cat.fullWhite && cat.dilute && cat.baseColor == 'cinnamon'\r\n            },\r\n            {\r\n                label: 'Cream',\r\n                onClick: () => dispatch(updateCat({baseColor: 'red', dilute: true, fullWhite: false})),\r\n                activated: !cat.fullWhite && cat.dilute && cat.baseColor == 'red'\r\n            },\r\n            {\r\n                label: 'White',\r\n                onClick: () => dispatch(updateCat({fullWhite: true})),\r\n                activated: cat.fullWhite\r\n            }\r\n        ]\r\n    }];\r\n    const sliders = [\r\n        {\r\n            label: 'Redness',\r\n            onChange: ({target: {value}}) => dispatch(updateCat({redness: Number(value)})),\r\n            value: cat.redness,\r\n            disabled: cat.baseColor !== 'red' || cat.fullWhite\r\n        },\r\n        {\r\n            label: 'Dilution',\r\n            onChange: ({target: {value}}) => dispatch(updateCat({dilution: Number(value)})),\r\n            value: cat.dilution,\r\n            disabled: !cat.dilute || cat.fullWhite\r\n        }\r\n    ];\r\n\r\n    return <Section title={'Fur color'} buttonGroups={buttonGroup} sliders={sliders} />;\r\n};\r\n\r\nexport default FurColorSection;","import {useSelector, useDispatch} from 'react-redux';\r\nimport Section from '../Section';\r\nimport {catSelector, updateCat} from '../../state/catState';\r\n\r\nconst MarkingTypeSection = () => {\r\n    const dispatch = useDispatch();\r\n    const cat = useSelector(catSelector);\r\n    const buttonGroup = [{\r\n        buttons: [\r\n            {\r\n                label: 'Solid',\r\n                onClick: () => dispatch(updateCat({tabby: false, tortie: false})),\r\n                disabled: cat.baseColor === 'red',\r\n                activated: !cat.tabby && !cat.tortie\r\n            },\r\n            {\r\n                label: 'Tabby',\r\n                onClick: () => dispatch(updateCat({tabby: true, tortie: false})),\r\n                disabled: cat.baseColor === 'red',\r\n                activated: cat.tabby && !cat.tortie\r\n            },\r\n            {\r\n                label: 'Tortie',\r\n                onClick: () => dispatch(updateCat({tabby: false, tortie: true})),\r\n                disabled: cat.baseColor === 'red',\r\n                activated: !cat.tabby && cat.tortie\r\n            },\r\n            {\r\n                label: 'Torbie',\r\n                onClick: () => dispatch(updateCat({tabby: true, tortie: true})),\r\n                disabled: cat.baseColor === 'red',\r\n                activated: cat.tabby && cat.tortie\r\n            }\r\n        ]\r\n    }];\r\n    const sliders = [\r\n        {\r\n            label: 'Redness',\r\n            onChange: ({target: {value}}) => dispatch(updateCat({redness: Number(value)})),\r\n            value: cat.redness,\r\n            disabled: !cat.tabby && !cat.tortie && (cat.baseColor !== 'red') && !cat.silver\r\n        },\r\n        {\r\n            label: 'Contrast',\r\n            onChange: ({target: {value}}) => dispatch(updateCat({patternContrast: Number(value)})),\r\n            value: cat.patternContrast,\r\n            disabled: !cat.tabby && !cat.tortie && (cat.baseColor !== 'red')\r\n        }\r\n    ];\r\n\r\n    return <Section title='Marking type' buttonGroups={buttonGroup} sliders={sliders} disabled={cat.fullWhite} />;\r\n};\r\n\r\nexport default MarkingTypeSection;","import {useSelector, useDispatch} from 'react-redux';\r\nimport Section from '../Section';\r\nimport {catSelector, updateCat} from '../../state/catState';\r\n\r\nconst PatternSection = () => {\r\n    const dispatch = useDispatch();\r\n    const cat = useSelector(catSelector);\r\n    const buttonGroup = [{\r\n        buttons: [\r\n            {label: 'Mackerel', onClick: () => dispatch(updateCat({pattern: 'mackerel'})), activated: cat.pattern === 'mackerel'},\r\n            {label: 'Classic', onClick: () => dispatch(updateCat({pattern: 'classic'})), activated: cat.pattern === 'classic'},\r\n            {label: 'Spotted', onClick: () => dispatch(updateCat({pattern: 'spotted'})), activated: cat.pattern === 'spotted'},\r\n            {label: 'Ticked', onClick: () => dispatch(updateCat({pattern: 'ticked'})), activated: cat.pattern === 'ticked'},\r\n            {label: 'Rosette', onClick: () => dispatch(updateCat({pattern: 'rosette'})), activated: cat.pattern === 'rosette'},\r\n            {label: 'Marble', onClick: () => dispatch(updateCat({pattern: 'marble'})), activated: cat.pattern === 'marble'},\r\n            {label: 'Shaded', onClick: () => dispatch(updateCat({pattern: 'shaded'})), activated: cat.pattern === 'shaded'},\r\n            {label: 'Tipped', onClick: () => dispatch(updateCat({pattern: 'tipped'})), activated: cat.pattern === 'tipped'}\r\n        ]\r\n    }];\r\n\r\n    return <Section title='Pattern' buttonGroups={buttonGroup} disabled={(!cat.tabby && !cat.tortie && (cat.baseColor !== 'red')) || cat.fullWhite} />;\r\n};\r\n\r\nexport default PatternSection;","import {useSelector, useDispatch} from 'react-redux';\r\nimport Section from '../Section';\r\nimport {catSelector, updateCat} from '../../state/catState';\r\n\r\nconst SilverSection = () => {\r\n    const dispatch = useDispatch();\r\n    const cat = useSelector(catSelector);\r\n    const buttonGroup = [{\r\n        buttons: [\r\n            {label: 'Standard', onClick: () => dispatch(updateCat({silver: false})), activated: !cat.silver},\r\n            {label: 'Silver', onClick: () => dispatch(updateCat({silver: true})), activated: cat.silver}\r\n        ]\r\n    }];\r\n\r\n    return <Section title='Silver' buttonGroups={buttonGroup} disabled={cat.fullWhite} />;\r\n};\r\n\r\nexport default SilverSection;","import {useSelector, useDispatch} from 'react-redux';\r\nimport Section from '../Section';\r\nimport {catSelector, updateCat} from '../../state/catState';\r\n\r\nconst PointSection = () => {\r\n    const dispatch = useDispatch();\r\n    const cat = useSelector(catSelector);\r\n    const buttonGroup = [{\r\n        buttons: [\r\n            {label: 'Standard', onClick: () => dispatch(updateCat({point: 'standard'})), activated: cat.point === 'standard'},\r\n            {label: 'Point', onClick: () => dispatch(updateCat({point: 'point'})), activated: cat.point === 'point'},\r\n            {label: 'Mink', onClick: () => dispatch(updateCat({point: 'mink'})), activated: cat.point === 'mink'},\r\n            {label: 'Sepia', onClick: () => dispatch(updateCat({point: 'sepia'})), activated: cat.point === 'sepia'}\r\n        ]\r\n    }];\r\n\r\n    return <Section title='Colorpoint' buttonGroups={buttonGroup} disabled={cat.fullWhite} />;\r\n};\r\n\r\nexport default PointSection;","import {useSelector, useDispatch} from 'react-redux';\r\nimport Section from '../Section';\r\nimport {catSelector, updateCat} from '../../state/catState';\r\n\r\nconst WhiteSection = () => {\r\n    const dispatch = useDispatch();\r\n    const cat = useSelector(catSelector);\r\n    const buttonGroup = [{\r\n        title: 'Presets',\r\n        buttons: [\r\n            // preset values are temporary right now, will be modified once art is complete\r\n            {label: 'None', onClick: () => dispatch(updateCat({whiteSpread: 0})), activated: cat.whiteSpread === 0},\r\n            {label: 'Low', onClick: () => dispatch(updateCat({whiteSpread: 4})), activated: cat.whiteSpread === 4},\r\n            {label: 'Medium', onClick: () => dispatch(updateCat({whiteSpread: 8})), activated: cat.whiteSpread === 8},\r\n            {label: 'High', onClick: () => dispatch(updateCat({whiteSpread: 12})), activated: cat.whiteSpread === 12}\r\n        ]\r\n    }];\r\n    const sliders = [\r\n        {\r\n            label: 'Spread',\r\n            onChange: ({target: {value}}) => dispatch(updateCat({whiteSpread: Number(value)})),\r\n            value: cat.whiteSpread\r\n        }\r\n    ];\r\n\r\n    return <Section title='White markings' buttonGroups={buttonGroup} sliders={sliders} disabled={cat.fullWhite} />;\r\n};\r\n\r\nexport default WhiteSection;","import {useDispatch, useSelector} from 'react-redux';\r\nimport {catSelector, updateCat} from '../../state/catState';\r\nimport Section from '../Section';\r\n\r\nconst EyeColorSection = () => {\r\n    const dispatch = useDispatch();\r\n    const cat = useSelector(catSelector);\r\n    const hasNormalEyes = (!cat.blueEyes || (!cat.fullWhite && cat.whiteSpread < 8)) &&\r\n        !(!cat.fullWhite && (cat.point === 'point' || cat.point === 'mink'));\r\n\r\n    const buttonGroup = [{\r\n        // title: 'Presets',\r\n        buttons: [\r\n            {\r\n                label: 'Copper',\r\n                onClick: () => dispatch(updateCat({eyeColor: 'copper', blueEyes: false})),\r\n                disabled: !cat.fullWhite && (cat.point === 'point' || cat.point === 'mink'),\r\n                activated: cat.eyeColor === 'copper' && hasNormalEyes\r\n            },\r\n            {\r\n                label: 'Orange',\r\n                onClick: () => dispatch(updateCat({eyeColor: 'orange', blueEyes: false})),\r\n                disabled: !cat.fullWhite && (cat.point === 'point' || cat.point === 'mink'),\r\n                activated: cat.eyeColor === 'orange' && hasNormalEyes\r\n            },\r\n            {\r\n                label: 'Yellow',\r\n                onClick: () => dispatch(updateCat({eyeColor: 'yellow', blueEyes: false})),\r\n                disabled: !cat.fullWhite && (cat.point === 'point' || cat.point === 'mink'),\r\n                activated: cat.eyeColor === 'yellow' && hasNormalEyes\r\n            },\r\n            {\r\n                label: 'Hazel',\r\n                onClick: () => dispatch(updateCat({eyeColor: 'hazel', blueEyes: false})),\r\n                disabled: !cat.fullWhite && (cat.point === 'point' || cat.point === 'mink'),\r\n                activated: cat.eyeColor === 'hazel' && hasNormalEyes\r\n            },\r\n            {\r\n                label: 'Green',\r\n                onClick: () => dispatch(updateCat({eyeColor: 'green', blueEyes: false})),\r\n                disabled: !cat.fullWhite && (cat.point === 'point' || cat.point === 'mink'),\r\n                activated: cat.eyeColor === 'green' && hasNormalEyes\r\n            },\r\n            {\r\n                label: 'Aqua',\r\n                // no onClick, there's no way to manually change to aqua, the button is just thee for signalling when it already is aqua\r\n                disabled: cat.point !== 'mink' || cat.fullWhite,\r\n                activated: cat.point === 'mink' && !cat.fullWhite\r\n            },\r\n            {\r\n                label: 'Blue',\r\n                onClick: () => dispatch(updateCat({blueEyes: true})),\r\n                disabled: (!cat.fullWhite && cat.whiteSpread < 8 && cat.point !== 'point') || (cat.point === 'mink' && !cat.fullWhite),\r\n                activated:\r\n                    ((cat.blueEyes && (cat.fullWhite || cat.whiteSpread >= 8)) || // if you have blue eyes and can show them\r\n                    (cat.point === 'point' && !cat.fullWhite)) && // or if you're an unmasked point\r\n                    !(cat.point === 'mink' && !cat.fullWhite) // and you're not an unmasked mink\r\n            }\r\n        ]\r\n    }];\r\n\r\n    // TODO add in pigment simulations and re-enable these sliders\r\n    // const sliders = [\r\n    //     {label: 'Pigment intensity', disabled: true},\r\n    //     {label: 'Blue refraction', disabled: true}\r\n    // ];\r\n\r\n    return <Section title='Eye color' buttonGroups={buttonGroup} />;\r\n};\r\n\r\nexport default EyeColorSection;","// between min and max both inclusive\r\nexport const pickRandomInt = (min, max) => Math.floor(Math.random() * ((max + 1) - min) + min);\r\n\r\nexport const pickRandomFromArray = arr => arr[pickRandomInt(0, arr.length - 1)];\r\n\r\nexport const pickRandomBool = () => (pickRandomInt(0, 1) === 1);\r\n\r\n// options should be an array, with each element being an array with two elements: [value, weight]\r\n// weights should be positive integers\r\nexport const pickRandomWeighted = (options, randomInt = pickRandomInt) => {\r\n    const sumWeights = options.reduce((acc, curr) => acc + curr[1], 0);\r\n    const rng = randomInt(1, sumWeights);\r\n    let result;\r\n\r\n    for(let i = 0, currentSum = 0; i < options.length; i++) {\r\n        result = options[i][0];\r\n        currentSum += options[i][1];\r\n        if(rng <= currentSum) {\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const generateRandomCat = () => ({\r\n    baseColor: pickRandomWeighted([\r\n        ['black', 4],\r\n        ['chocolate', 3],\r\n        ['cinnamon', 2],\r\n        ['red', 4]\r\n    ]),\r\n    dilute: pickRandomWeighted([[true, 1], [false, 2]]),\r\n    fullWhite: pickRandomWeighted([[true, 1], [false, 9]]),\r\n    redness: pickRandomInt(0, 16),\r\n    dilution: pickRandomInt(0, 16),\r\n    tabby: pickRandomBool(),\r\n    tortie: pickRandomBool(),\r\n    pattern: pickRandomWeighted([\r\n        ['mackerel', 3],\r\n        ['classic', 3],\r\n        ['spotted', 2],\r\n        ['ticked', 2],\r\n        ['rosette', 1],\r\n        ['marble', 1],\r\n        ['shaded', 1],\r\n        ['tipped', 1]\r\n    ]),\r\n    patternContrast: pickRandomInt(0, 16),\r\n    silver: pickRandomWeighted([[true, 1], [false, 4]]),\r\n    whiteSpread: pickRandomWeighted([[0, 3], [pickRandomInt(1, 16), 1]]),\r\n    point: pickRandomWeighted([\r\n        ['standard', 15],\r\n        ['point', 4],\r\n        ['mink', 1],\r\n        ['sepia', 1]\r\n    ]),\r\n    blueEyes: pickRandomWeighted([[true, 1], [false, 2]]),\r\n    eyeColor: pickRandomFromArray(['copper', 'orange', 'yellow', 'hazel', 'green'])\r\n    // eyePigment: pickRandomInt(0, 16),\r\n    // blueRefraction: pickRandomInt(0, 16),\r\n    // eyeColorBase: pickRandomFromArray(['standard', 'aqua', 'blue'])\r\n});","import {useDispatch} from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {updateCat} from '../state/catState';\r\nimport {initialState} from '../state/store';\r\nimport {generateRandomCat} from '../utils/randomizerUtils';\r\nimport Button from './Button';\r\n\r\nconst Container = styled.section`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    // easier to add a negative margin here then change the heading margin for only the first section in this case\r\n    margin-bottom: -1rem;\r\n`;\r\n\r\nconst ButtonControls = () => {\r\n    const dispatch = useDispatch();\r\n    const handleReset = () => dispatch(updateCat(initialState.cat));\r\n    const handleRandomize = () => dispatch(updateCat(generateRandomCat()));\r\n\r\n    return (\r\n        <Container>\r\n            <Button value={'Start over'} onClick={handleReset} />\r\n            <Button value={'Randomize'} onClick={handleRandomize} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ButtonControls;","import FurColorSection from './sections/FurColorSection';\r\nimport MarkingTypeSection from './sections/MarkingTypeSection';\r\nimport PatternSection from './sections/PatternSection';\r\nimport SilverSection from './sections/SilverSection';\r\nimport PointSection from './sections/PointSection';\r\nimport WhiteSection from './sections/WhiteSection';\r\nimport EyeColorSection from './sections/EyeColorSection';\r\nimport ButtonControls from './ButtonControls';\r\n\r\nconst ColorPanel = () => (\r\n    <>\r\n        <ButtonControls />\r\n        <FurColorSection />\r\n        <MarkingTypeSection />\r\n        <PatternSection />\r\n        <SilverSection />\r\n        <PointSection />\r\n        <WhiteSection />\r\n        <EyeColorSection />\r\n    </>\r\n);\r\n\r\nexport default ColorPanel;","// creates a new image element and wraps the load event in a promise\r\nexport const loadImage = src => (\r\n    new Promise((resolve, reject) => {\r\n        const img = new Image();\r\n        img.addEventListener('load', () => resolve(img));\r\n        img.addEventListener('error', err => reject(err));\r\n        img.src = src;\r\n    })\r\n);\r\n\r\nexport const mapTraitToRange = (value, targetMin, targetMax) => {\r\n    const traitRange = 16; // trait range is 0-16\r\n    const targetRange = targetMax - targetMin;\r\n    return value / traitRange * targetRange + targetMin;\r\n};","export default __webpack_public_path__ + \"static/media/lineart.158e22c8.png\";","export default __webpack_public_path__ + \"static/media/base.7499ffa2.png\";","export default __webpack_public_path__ + \"static/media/eyes.a379f03e.png\";","export default __webpack_public_path__ + \"static/media/mackerel.74d199da.png\";","export default __webpack_public_path__ + \"static/media/classic.d12232dd.png\";","export default __webpack_public_path__ + \"static/media/spotted.498973c0.png\";","export default __webpack_public_path__ + \"static/media/ticked.b1ca9245.png\";","export default __webpack_public_path__ + \"static/media/rosette.2cc59172.png\";","export default __webpack_public_path__ + \"static/media/marble.00e32cf6.png\";","export default __webpack_public_path__ + \"static/media/smoke.3a11e2ec.png\";","export default __webpack_public_path__ + \"static/media/shaded.acf76727.png\";","export default __webpack_public_path__ + \"static/media/tipped.ba325036.png\";","export default __webpack_public_path__ + \"static/media/tortie.ae553ae9.png\";","export default __webpack_public_path__ + \"static/media/point.48391cb8.png\";","export default __webpack_public_path__ + \"static/media/white-low.9919cf96.png\";","export default __webpack_public_path__ + \"static/media/white-medium.55ebc711.png\";","export default __webpack_public_path__ + \"static/media/white-high.d27ac0e7.png\";","class BufferCanvas {\r\n    constructor(width, height) {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        this.canvas = canvas;\r\n        this.context = canvas.getContext('2d');\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    drawImage(img, fill, mask) {\r\n        this.context.clearRect(0, 0, this.width, this.height);\r\n        this.context.globalCompositeOperation = 'source-over';\r\n        if(fill) {\r\n            this.context.fillStyle = fill;\r\n            this.context.fillRect(0, 0, this.width, this.height);\r\n            this.context.globalCompositeOperation = 'destination-in';\r\n        }\r\n\r\n        this.context.drawImage(img, 0, 0, this.width, this.width * (img.height / img.width));\r\n\r\n        if(mask) {\r\n            mask = Array.isArray(mask) ? mask : [mask];\r\n            this.context.globalCompositeOperation = 'destination-in';\r\n            mask.forEach(maskImg => {\r\n                this.context.drawImage(maskImg, 0, 0, this.width, this.width * (maskImg.height / maskImg.width));\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default BufferCanvas;","export const hexToRgb = hex => {\r\n    const splitHex = hex.trim().split('#');\r\n    // gets everything after the #, regardless of whether there is one or not\r\n    const cleanHex = splitHex[splitHex.length - 1];\r\n    let hexComponents;\r\n\r\n    if(cleanHex.length === 3) { // expands #fff format into full 6 digits\r\n        hexComponents = cleanHex.split('').map(component => component + component);\r\n    }\r\n    else {\r\n        hexComponents = cleanHex.match(/.{2}/g);\r\n    }\r\n    return hexComponents.map(component => parseInt(component, 16));\r\n};\r\n\r\nexport const rgbToHex = rgb => {\r\n    const hexComponents = rgb.map(component => {\r\n        const minMaxedComponent = component < 0 ? 0 : (component > 255 ? 255 : component);\r\n        let hexComponent = Math.round(minMaxedComponent).toString(16);\r\n        if(component < 16) {\r\n            hexComponent = '0' + hexComponent;\r\n        }\r\n        return hexComponent;\r\n    });\r\n    return `#${hexComponents.join('')}`;\r\n};\r\n\r\nexport const blendAlpha = (bottomColor, topColor, alpha) => (\r\n    bottomColor.map((x, i) => bottomColor[i] * (1 - alpha) + topColor[i] * alpha)\r\n);","import {rgbToHex, blendAlpha} from '../utils/color-utils';\r\nimport {mapTraitToRange} from '../utils/utils';\r\n\r\n// CONSTANTS\r\nexport const CONSTANTS = {\r\n    blackIntensity: 900,\r\n    chocolateIntensity: 400,\r\n    cinnamonIntensity: 225,\r\n    redMinIntensity: 225,\r\n    redMaxIntensity: 375,\r\n    dilutionMin: 0.3,\r\n    dilutionMax: 0.65,\r\n    agoutiFactor: 0.15,\r\n    agoutiSilverFactor: 0.8,\r\n    redSilverFactor: 0.1,\r\n    agoutiContrastMin: 0.275,\r\n    agoutiContrastMax: 0.65,\r\n    // for currently unknown reasons, silver cats appear much lighter than if you just change out the agouti color\r\n    // contrast values have been altered to temporarily fix this until the problem is solved\r\n    silverContrastMin: 0.55,\r\n    silverContrastMax: 0.85,\r\n    widebandContrastMin: 0.77,\r\n    widebandContrastMax: 0.85,\r\n    pointLightFactor: 0.05, // similar enough for black and red to be the same factors\r\n    pointBlackLightFactor: 0.025,\r\n    minkLightFactor: 0.16,\r\n    sepiaLightFactor: 0.4,\r\n    pointDarkFactor: 0.9,\r\n    pointRedFactor: 0.6 // darker factor is more different so it needs it own\r\n};\r\n\r\nexport const getEumelaninAbsorption = concentration => {\r\n    // tweaked from the canonical absorption values to look nicer\r\n    const eumelaninAbsorption = [0.45, 0.74, 1.47];\r\n    return eumelaninAbsorption.map(x => x * (concentration / 100));\r\n};\r\n\r\nexport const getPheomelaninAbsorption = concentration => {\r\n    // tweaked from the canonical absorption values to look nicer\r\n    const pheomelaninAbsorption = [0.205, 0.44, 0.9];\r\n    return pheomelaninAbsorption.map(x => x * (concentration / 100));\r\n};\r\n\r\nexport const simulateMelanin = (melaninType, intensity, dilution, silvering) => {\r\n    const absorption = melaninType === 'pheomelanin' ? getPheomelaninAbsorption(intensity) : getEumelaninAbsorption(intensity);\r\n    // \"magic number\" used to lighten colors closer to what we'd perceive as the \"local color\"\r\n    const ambientOffest = 30;\r\n    // lambert-beer's model formula for transmittance (with a length of 1)\r\n    // gives more accurate colors than a reflectance formula\r\n    const transmittance = absorption.map(x => Math.exp(-x));\r\n    const melaninRgb = transmittance.map(x => x * 255 + ambientOffest);\r\n    const silverRgb = blendAlpha(melaninRgb, [255, 255, 255], silvering); // performs silvering dilution\r\n    return blendAlpha(silverRgb, [255, 255, 255], dilution); // dilutes color\r\n};\r\n\r\nexport const getBlackSettings = (cat, pointLight = false) => {\r\n    const baseIntensity = CONSTANTS[cat.baseColor + 'Intensity'];\r\n    let pointFactor = 1;\r\n    if(cat.point !== 'standard') {\r\n        if(pointLight) {\r\n            if(cat.point === 'point' && cat.baseColor === 'black') {\r\n                pointFactor = CONSTANTS.pointBlackLightFactor;\r\n            }\r\n            else {\r\n                pointFactor = CONSTANTS[cat.point + 'LightFactor'];\r\n            }\r\n        }\r\n        else {\r\n            pointFactor = CONSTANTS.pointDarkFactor;\r\n        }\r\n    }\r\n    return [\r\n        'eumelanin',\r\n        baseIntensity * pointFactor,\r\n        cat.dilute ? mapTraitToRange(cat.dilution, CONSTANTS.dilutionMin, CONSTANTS.dilutionMax) : 0,\r\n        0\r\n    ];\r\n};\r\n\r\nexport const getRedSettings = (cat, pointLight = false) => {\r\n    const baseIntensity = mapTraitToRange(cat.redness, CONSTANTS.redMinIntensity, CONSTANTS.redMaxIntensity);\r\n    const pointFactor = cat.point === 'standard' ? 1 : (\r\n        pointLight ? CONSTANTS[cat.point + 'LightFactor'] : CONSTANTS.pointRedFactor\r\n    );\r\n    return [\r\n        'pheomelanin',\r\n        baseIntensity * pointFactor,\r\n        cat.dilute ? mapTraitToRange(cat.dilution, CONSTANTS.dilutionMin, CONSTANTS.dilutionMax) : 0,\r\n        cat.silver ? CONSTANTS.redSilverFactor : 0\r\n    ];\r\n};\r\n\r\nexport const getAgoutiSettings = (cat, pointLight = false) => {\r\n    const baseIntensity = mapTraitToRange(cat.redness, CONSTANTS.redMinIntensity, CONSTANTS.redMaxIntensity);\r\n    const pointFactor = cat.point === 'standard' ? 1 : (\r\n        pointLight ? CONSTANTS[cat.point + 'LightFactor'] : CONSTANTS.pointRedFactor\r\n    );\r\n    return [\r\n        'pheomelanin',\r\n        baseIntensity * pointFactor * CONSTANTS.agoutiFactor,\r\n        cat.dilute ? mapTraitToRange(cat.dilution, CONSTANTS.dilutionMin, CONSTANTS.dilutionMax) : 0,\r\n        cat.silver ? CONSTANTS.agoutiSilverFactor : 0\r\n    ];\r\n};\r\n\r\nconst blendAgouti = (baseSettings, cat, pointLight = false) => {\r\n    const baseRgb = simulateMelanin(...baseSettings);\r\n    const agoutiRgb = simulateMelanin(...getAgoutiSettings(cat, pointLight));\r\n    if(cat.pattern === 'shaded' || cat.pattern === 'tipped') {\r\n        return rgbToHex(blendAlpha(baseRgb, agoutiRgb, mapTraitToRange(cat.patternContrast, CONSTANTS.widebandContrastMin, CONSTANTS.widebandContrastMax)));\r\n    }\r\n    if(cat.silver) {\r\n        return rgbToHex(blendAlpha(baseRgb, agoutiRgb, mapTraitToRange(cat.patternContrast, CONSTANTS.silverContrastMin, CONSTANTS.silverContrastMax)));\r\n    }\r\n    return rgbToHex(blendAlpha(baseRgb, agoutiRgb, mapTraitToRange(cat.patternContrast, CONSTANTS.agoutiContrastMin, CONSTANTS.agoutiContrastMax)));\r\n};\r\n\r\n// red methods need to be separate for ease of getting tortie colors\r\nexport const getRedGroundColor = (cat, pointLight = false) => blendAgouti(getRedSettings(cat, pointLight), cat, pointLight);\r\n\r\nexport const getRedTopColor = (cat, pointLight = false) => rgbToHex(simulateMelanin(...getRedSettings(cat, pointLight)));\r\n\r\nexport const getBlackGroundColor = (cat, pointLight = false) => {\r\n    if(cat.tabby) {\r\n        return blendAgouti(getBlackSettings(cat, pointLight), cat, pointLight);\r\n    }\r\n    return rgbToHex(simulateMelanin(...getBlackSettings(cat, pointLight)));\r\n};\r\n\r\nexport const getBlackTopColor = (cat, pointLight = false) => {\r\n    if(!cat.tabby && cat.silver) { // weird case for smoke only\r\n        return rgbToHex(simulateMelanin(...getAgoutiSettings(cat, pointLight)));\r\n    }\r\n    return rgbToHex(simulateMelanin(...getBlackSettings(cat, pointLight)));\r\n};\r\n\r\n// TODO make this a dynamic simulation instead of hard coded colors\r\nexport const getEyeColor = cat => {\r\n    const eyeColors = {\r\n        copper: '#a54f12',\r\n        orange: '#d87831',\r\n        yellow: '#e3a652',\r\n        hazel: '#a09541',\r\n        green: '#79b45d',\r\n        aqua: '#88bea3',\r\n        blue: '#5eaae3'\r\n    };\r\n\r\n    if(cat.fullWhite && cat.blueEyes) { // full white always takes presedence over everything\r\n        return eyeColors.blue;\r\n    }\r\n    else if(cat.point === 'mink' && !cat.fullWhite) {\r\n        return eyeColors.aqua;\r\n    }\r\n    else if((cat.blueEyes && cat.whiteSpread >= 8) || (!cat.fullWhite && cat.point === 'point')) {\r\n        return eyeColors.blue;\r\n    }\r\n    else {\r\n        return eyeColors[cat.eyeColor];\r\n    }\r\n};","import lineart from '../images/lineart.png';\r\nimport base from '../images/base.png';\r\nimport eyes from '../images/eyes.png';\r\nimport mackerel from '../images/mackerel.png';\r\nimport classic from '../images/classic.png';\r\nimport spotted from '../images/spotted.png';\r\nimport ticked from '../images/ticked.png';\r\nimport rosette from '../images/rosette.png';\r\nimport marble from '../images/marble.png';\r\nimport smoke from '../images/smoke.png';\r\nimport shaded from '../images/shaded.png';\r\nimport tipped from '../images/tipped.png';\r\nimport tortie from '../images/tortie.png';\r\nimport point from '../images/point.png';\r\nimport whiteLow from '../images/white-low.png';\r\nimport whiteMedium from '../images/white-medium.png';\r\nimport whiteHigh from '../images/white-high.png';\r\nimport {loadImage} from '../utils/utils';\r\nimport BufferCanvas from './BufferCanvas';\r\nimport * as colors from './catColors';\r\n\r\nclass CatCanvas {\r\n    constructor(canvas, onLoad) {\r\n        this.canvas = canvas;\r\n        this.context = canvas.getContext('2d');\r\n        this.onLoad = onLoad;\r\n        this.loaded = false;\r\n\r\n        this.loadImages();\r\n    }\r\n\r\n    loadImages() {\r\n        const imageSrcs = [\r\n            base,\r\n            lineart,\r\n            eyes,\r\n            mackerel,\r\n            classic,\r\n            spotted,\r\n            ticked,\r\n            rosette,\r\n            marble,\r\n            smoke,\r\n            shaded,\r\n            tipped,\r\n            tortie,\r\n            point,\r\n            whiteLow,\r\n            whiteMedium,\r\n            whiteHigh\r\n        ];\r\n\r\n        // TODO handle loading errors\r\n        Promise.all(imageSrcs.map(imgSrc => loadImage(imgSrc))).then(images => {\r\n            // TODO find a shorter and less repetetive add images to the object\r\n            this.images = {\r\n                base: images[0],\r\n                lineart: images[1],\r\n                eyes: images[2],\r\n                mackerel: images[3],\r\n                classic: images[4],\r\n                spotted: images[5],\r\n                ticked: images[6],\r\n                rosette: images[7],\r\n                marble: images[8],\r\n                smoke: images[9],\r\n                shaded: images[10],\r\n                tipped: images[11],\r\n                tortie: images[12],\r\n                point: images[13],\r\n                whiteLow: images[14],\r\n                whiteMedium: images[15],\r\n                whiteHigh: images[16]\r\n            };\r\n\r\n            this.loaded = true;\r\n            this.onLoad();\r\n        });\r\n    }\r\n\r\n    drawCat(cat) {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        if(this.loaded) {\r\n            // new buffer is created for every render to ensure it's the current size of the canvas\r\n            const buffer = new BufferCanvas(this.canvas.width, this.canvas.height);\r\n            const layers = this.getLayerList(cat);\r\n\r\n            for(const layer of layers) {\r\n                if(layer.shouldRender) {\r\n                    // if the color and/or mask aren't defined on the layer, the function should behave the same as if they were not passed at all\r\n                    buffer.drawImage(layer.image, layer.color, layer.mask);\r\n                    this.context.drawImage(buffer.canvas, 0, 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getLayerList(cat) {\r\n        // TODO anyway to make this a bit shorter?\r\n\r\n        if(cat.fullWhite) {\r\n            return [\r\n                { // base\r\n                    shouldRender: true,\r\n                    image: this.images.base,\r\n                    color: '#fff'\r\n                },\r\n                { // eyes\r\n                    shouldRender: true,\r\n                    image: this.images.eyes,\r\n                    color: colors.getEyeColor(cat)\r\n                },\r\n                { // lineart\r\n                    shouldRender: true,\r\n                    image: this.images.lineart\r\n                }\r\n            ];\r\n        }\r\n        const point = cat.point !== 'standard';\r\n\r\n        // TODO branch based on point and maybe tortie to reduce the number of layers\r\n        return [\r\n            { // base\r\n                shouldRender: true,\r\n                image: this.images.base,\r\n                color: cat.baseColor === 'red' ? colors.getRedGroundColor(cat, point) : colors.getBlackGroundColor(cat, point)\r\n            },\r\n            { // smoke\r\n                shouldRender: !cat.tabby && cat.silver && (cat.baseColor !== 'red'),\r\n                image: this.images.smoke,\r\n                color: colors.getBlackTopColor(cat, point)\r\n            },\r\n            { // tabby stripes\r\n                shouldRender: cat.tabby || cat.baseColor === 'red',\r\n                image: this.images[cat.pattern],\r\n                color: cat.baseColor === 'red' ? colors.getRedTopColor(cat, point) : colors.getBlackTopColor(cat, point)\r\n            },\r\n            { // tortie patches\r\n                shouldRender: cat.tortie && (cat.baseColor !== 'red'),\r\n                image: this.images.tortie,\r\n                color: colors.getRedGroundColor(cat, point)\r\n            },\r\n            { // tortie stripes\r\n                shouldRender: cat.tortie && (cat.baseColor !== 'red'),\r\n                image: this.images[cat.pattern],\r\n                color: colors.getRedTopColor(cat, point),\r\n                mask: this.images.tortie\r\n            },\r\n            { // point base\r\n                shouldRender: point,\r\n                image: this.images.point,\r\n                color: cat.baseColor === 'red' ? colors.getRedGroundColor(cat) : colors.getBlackGroundColor(cat)\r\n            },\r\n            { // point smoke\r\n                shouldRender: point && !cat.tabby && cat.silver && (cat.baseColor !== 'red'),\r\n                image: this.images.smoke,\r\n                color: colors.getBlackTopColor(cat),\r\n                mask: this.images.point\r\n            },\r\n            { // point tabby stripes\r\n                shouldRender: point && cat.tabby || cat.baseColor === 'red',\r\n                image: this.images[cat.pattern],\r\n                color: cat.baseColor === 'red' ? colors.getRedTopColor(cat) : colors.getBlackTopColor(cat),\r\n                mask: this.images.point\r\n            },\r\n            { // point tortie patches\r\n                shouldRender: point && cat.tortie && (cat.baseColor !== 'red'),\r\n                image: this.images.tortie,\r\n                color: colors.getRedGroundColor(cat),\r\n                mask: this.images.point\r\n            },\r\n            { // point tortie stripes\r\n                shouldRender: point && cat.tortie && (cat.baseColor !== 'red'),\r\n                image: this.images[cat.pattern],\r\n                color: colors.getRedTopColor(cat),\r\n                mask: [this.images.tortie, this.images.point]\r\n            },\r\n            { // white patches\r\n                shouldRender: cat.whiteSpread > 0,\r\n                image:\r\n                    cat.whiteSpread >= 12 ?\r\n                        this.images.whiteHigh : (\r\n                            cat.whiteSpread >= 8 ?\r\n                                this.images.whiteMedium :\r\n                                this.images.whiteLow\r\n                        ),\r\n                color: '#fff'\r\n            },\r\n            { // eyes\r\n                shouldRender: true,\r\n                image: this.images.eyes,\r\n                color: colors.getEyeColor(cat)\r\n            },\r\n            { // lineart\r\n                shouldRender: true,\r\n                image: this.images.lineart\r\n            }\r\n        ];\r\n    }\r\n};\r\n\r\nexport default CatCanvas;","import {useRef, useState, useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {catSelector} from '../state/catState';\r\nimport CatCanvas from '../rendering/CatCanvas';\r\n\r\n// TODO add unit tests for component\r\n// TODO try and reduce flickering on container resize\r\nconst CatDisplay = ({width, height}) => {\r\n    const canvasRef = useRef();\r\n    const catCanvas = useRef();\r\n    const cat = useSelector(catSelector);\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        catCanvas.current = new CatCanvas(canvasRef.current, () => setLoaded(true));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        catCanvas.current.drawCat(cat);\r\n    }, [cat, loaded, width, height]);\r\n\r\n    return <canvas ref={canvasRef} width={width} height={height}></canvas>;\r\n};\r\n\r\nexport default CatDisplay;","import {useState, useEffect} from 'react';\r\nimport {loadImage} from '../utils/utils';\r\nimport lineart from '../images/lineart.png';\r\nimport {withSize} from 'react-sizeme';\r\nimport CatDisplay from './CatDisplay';\r\n\r\nconst CatDisplayContainer = ({size, children}) => {\r\n    const [aspectRatio, setAspectRatio] = useState(1);\r\n    const [maxWidth, setMaxWidth] = useState(Infinity);\r\n    const calculatedWidth = size.height / aspectRatio;\r\n    const calculatedHeight = size.width * aspectRatio;\r\n    let width = calculatedHeight < size.height ? size.width : calculatedWidth;\r\n    let height = calculatedHeight < size.height ? calculatedHeight : size.height;\r\n\r\n    if(width > maxWidth) { // avoid image quality loss from overscaling\r\n        width = maxWidth;\r\n        height = maxWidth * aspectRatio;\r\n    }\r\n\r\n    useEffect(() => { // load image to get aspect ratio and max width\r\n        loadImage(lineart).then(img => {\r\n            setMaxWidth(img.width);\r\n            setAspectRatio(img.height / img.width);\r\n        });\r\n    }, []);\r\n\r\n    return <div style={{width: '100%', height: '100%'}}><CatDisplay width={width} height={height} /></div>;\r\n};\r\n\r\nexport default withSize({monitorHeight: true})(CatDisplayContainer);","import {useSelector} from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {catSelector} from '../state/catState';\r\n\r\nexport const getDescription = cat => {\r\n    // no need to do any further checks for solid white cats\r\n    if(cat.fullWhite) return 'White';\r\n\r\n    let result;\r\n    // helper checks\r\n    const isRed = cat.baseColor === 'red';\r\n    const isBlack = cat.baseColor === 'black';\r\n    const isStriped = cat.tabby || isRed;\r\n    const isGolden = (\r\n        (cat.pattern === 'shaded' || cat.pattern === 'tipped') &&\r\n        (isStriped || cat.tortie)\r\n    );\r\n\r\n    // COLOR\r\n    if(cat.dilute) {\r\n        const diluteColors = {black: 'blue', chocolate: 'lilac', cinnamon: 'fawn', red: 'cream'};\r\n        result = diluteColors[cat.baseColor];\r\n    }\r\n    else if(isBlack) { // as the most common color, black cats tend to have unique color names\r\n        if(cat.silver && cat.tabby) result = 'silver';\r\n        else if(isGolden) result = 'golden';\r\n        else if(cat.point !== 'standard') result = 'seal';\r\n        else if(cat.tabby) result = 'brown';\r\n        else result = 'black';\r\n    }\r\n    else {\r\n        result = cat.baseColor;\r\n    }\r\n\r\n    // SILVER AND GOLDEN\r\n    if(cat.silver) {\r\n        if(isStriped && !(isBlack && !cat.dilute)) result += ' silver'; // tabbies and torbies\r\n        else if(!isStriped) result += ' smoke'; // solid and torties\r\n    }\r\n    else if(isGolden && !(isBlack && !cat.dilute)) { // if shaded/tipped non-black tabby (since black already has golden in the name)\r\n        result += ' golden';\r\n    }\r\n\r\n    // MARKINGS\r\n    if(isStriped || isGolden) result += ' ' + cat.pattern;\r\n    if(!isRed && cat.tortie) result += (cat.tabby) ? ' torbie' : ' tortie';\r\n    else if(isStriped && (cat.pattern !== 'shaded' && cat.pattern !== 'tipped')) result += ' tabby';\r\n\r\n    // COLORPOINT\r\n    if(cat.point !== 'standard') result += ' ' + cat.point;\r\n\r\n    // WHITE MARKINGS\r\n    if(cat.whiteSpread > 0) result += ' bicolor';\r\n\r\n    // TORTIE MARKINGS SPECIAL CASE\r\n    if(cat.tortie && !isStriped && !isGolden) result += ` with ${cat.pattern} markings`;\r\n\r\n    // capitalize the first letter\r\n    result = result.charAt(0).toUpperCase() + result.slice(1);\r\n    return result;\r\n};\r\n\r\nconst Container = styled.div`\r\n    min-height: 10%;\r\n    padding: 2rem 4rem 4rem;\r\n    font-size: 2rem;\r\n    text-align: center;\r\n`;\r\n\r\nconst CatDescription = () => {\r\n    const cat = useSelector(catSelector);\r\n    return <Container>{getDescription(cat)}</Container>;\r\n};\r\n\r\nexport default CatDescription;","import styled from 'styled-components';\r\nimport ColorPanel from './components/ColorPanel';\r\nimport CatDisplayContainer from './components/CatDisplayContainer';\r\nimport CatDescription from './components/CatDescription';\r\nimport {colors} from './theme';\r\n\r\nconst Container = styled.div`\r\n    height: 100%;\r\n    background-color: ${colors.lightGray};\r\n    display: flex;\r\n    flex-direction: row;\r\n`;\r\n\r\nconst SidePane = styled.div`\r\n    overflow-y: auto;\r\n    background-color: #fff;\r\n    padding: 1rem 2rem;\r\n    flex-basis: 35%;\r\n    flex-shrink: 0;\r\n`;\r\n\r\nconst MainPane = styled.div`\r\n    flex-basis: 65%;\r\n    max-width: 65%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n`;\r\n\r\nconst DisplayWrapper = styled.div`\r\n    flex-basis: 90%;\r\n    overflow-y: hidden; // required by the display container to prevent a scaling bug with flexbox\r\n    overflow-x: hidden;\r\n    padding: 1rem 4rem 0;\r\n`;\r\n\r\nconst App = () => (\r\n    <Container>\r\n        <SidePane>\r\n            <ColorPanel />\r\n        </SidePane>\r\n        <MainPane>\r\n            <DisplayWrapper>\r\n                <CatDisplayContainer />\r\n            </DisplayWrapper>\r\n            <CatDescription />\r\n        </MainPane>\r\n    </Container>\r\n);\r\n\r\nexport default App;\r\n","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport store from './state/store';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <React.StrictMode>\r\n            <App />\r\n        </React.StrictMode>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}